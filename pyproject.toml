[project]
name = "GiantMIDI-Piano"
description = "GiantMIDI-Piano are transcribed from live recordings with a high-resolution piano transcription system"
authors = [
    {name = "Qiuqiang Kong", email = "qiuqiangkong@gmail.com"},
    {name = "Bochen Li"},
    {name = "Jitong Chen"},
    {name = "Yuxuan Wang"},
    {name = "gdm257", email = "257@gdm.anonaddy.com"},
]
dependencies = [
    "beautifulsoup4==4.9.1",
    "nltk==3.5",
    "piano-transcription-inference",
    "youtube-dl",
]
requires-python = ">=3.8"
readme = "README.md"
license = {text = "MIT"}
dynamic = ["version"]

[project.scripts]
giantmidi-piano = "giantmidi_piano.cli.main:main"
giant-midi-piano = "giantmidi_piano.cli.main:main"


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


# ==== PDM ====
[tool.pdm]
distribution = true
version = {source = "file", path = "src/giantmidi_piano/__init__.py"} # __init__:__version__


# ==== Import Linter ====
[tool.importlinter]
root_packages = [
    "giantmidi_piano",
]
include_external_packages = true
exclude_type_checking_imports = true


# ==== MyPy ====
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
ignore_missing_imports = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
pretty = true
plugins = [
    "mypy_zope:plugin", # zope.interface
    "loguru_mypy", # loguru
    "numpy.typing.mypy_plugin", # numpy
    # "mypy_django_plugin.main",  # you need to handle src-layout manually
    "mypy_drf_plugin.main", # djangorestframework
    "sqlmypy", # sqlalchemy 1.x
]

[[tool.mypy.overrides]]
module = "*.migrations.*" # Django migrations should not produce any errors:
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "django.*",
    "djangorestframework.*",
    "loguru.*",
    "numpy.*",
    "pandas.*",
    "sqlalchemy.*",
    "zope.interface.*",
]
ignore_missing_imports = false


# ==== Ruff ====
[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 119
indent-width = 4

# Assume Python 3.8
target-version = "py38"

# All paths are relative to the project root, which is the directory containing the pyproject.toml.
src = ["src", "tests"]

# Avoid automatically removing unused imports in __init__.py files.
ignore-init-module-imports = true

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# https://docs.astral.sh/ruff/rules/
select = [
    # pydocstyle
    "D",
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # isort
    "I",
    # pyupgrade
    "UP",
    # pep8-naming
    "N",
    # flake8-bandit
    "S",
    # Pylint
    "PL",
    # pandas-vet
    "PD",
    # NumPy-specific rules
    "NPY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    "D100",   # undocumented-public-module
    "D104",   # undocumented-public-package
    "D212",   # multi-line-summary-first-line
    "RUF003", # ambiguous-unicode-character-comment
]

# Avoid automatically removing unused imports in __init__.py files.
ignore-init-module-imports = true

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.format]
# Use single quotes for non-triple-quoted strings
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Use `\n` line endings for all files
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
